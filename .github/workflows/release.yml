name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "mtr-ng ${{ steps.get_version.outputs.version }}" \
            --notes "# mtr-ng ${{ steps.get_version.outputs.version }}

          ## Installation

          ### Quick Install (Unix/Linux/macOS)
          \`\`\`bash
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install/install.sh | bash
          \`\`\`

          ### Package Managers
          \`\`\`bash
          # Cargo (Rust)
          cargo install mtr-ng

          # From source
          git clone https://github.com/${{ github.repository }}
          cd mtr-ng && cargo build --release
          \`\`\`

          ### Manual Download
          Download the appropriate binary for your platform from the assets below.

          ## Usage
          \`\`\`bash
          # Basic usage
          sudo mtr-ng google.com

          # Show all metrics
          sudo mtr-ng google.com --show-all

          # Generate report
          mtr-ng google.com --report --count 10
          \`\`\`" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            name: linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
            name: linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-13
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-13
            name: macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            name: windows-x86_64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
          # Configure Cargo for cross-compilation
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF
          
          # Set environment variables for the build
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
          # Configure Cargo for musl cross-compilation
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.x86_64-unknown-linux-musl]
          linker = "musl-gcc"
          EOF
          
          # Set environment variables for the build
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV

      - name: Install Npcap SDK (Windows)
        if: matrix.target == 'x86_64-pc-windows-msvc'
        shell: powershell
        run: |
          # Download and install Npcap SDK
          Write-Host "Downloading Npcap SDK..."
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.13.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "npcap-sdk"
          
          # Set up environment variables for the build
          $sdkPath = "$pwd\npcap-sdk"
          echo "NPCAP_SDK=$sdkPath" >> $env:GITHUB_ENV
          echo "LIB=$env:LIB;$sdkPath\Lib\x64" >> $env:GITHUB_ENV
          echo "INCLUDE=$env:INCLUDE;$sdkPath\Include" >> $env:GITHUB_ENV
          
          Write-Host "Npcap SDK installed to: $sdkPath"
          Write-Host "Libraries available:"
          Get-ChildItem "$sdkPath\Lib\x64" -Name

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-2022'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf mtr-ng-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz mtr-ng
          echo "ASSET=mtr-ng-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - name: Create archive (Windows)
        if: matrix.os == 'windows-2022'
        run: |
          cd target/${{ matrix.target }}/release
          7z a mtr-ng-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip mtr-ng.exe
          echo "ASSET=mtr-ng-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip" >> $env:GITHUB_ENV

      - name: Upload Release Asset
        run: |
          gh release upload v${{ needs.create-release.outputs.version }} target/${{ matrix.target }}/release/${{ env.ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-packages:
    needs: create-release
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper devscripts

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build DEB package
        run: |
          cargo deb
          mv target/debian/*.deb ./mtr-ng_${{ needs.create-release.outputs.version }}_amd64.deb

      - name: Upload DEB package
        run: |
          gh release upload v${{ needs.create-release.outputs.version }} ./mtr-ng_${{ needs.create-release.outputs.version }}_amd64.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-homebrew:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: mtr-ng
          formula-path: Formula/mtr-ng.rb
          homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
          download-url: https://github.com/${{ github.repository }}/archive/v${{ needs.create-release.outputs.version }}.tar.gz
          commit-message: |
            mtr-ng ${{ needs.create-release.outputs.version }}
            
            Created by https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }} 